// Declaration variables.
var context, oscillator, isplaying=false;

// This function play the sound generated by the oscillator.
function play (typeWave, frequencyValue, detuneValue, startAfterValue)
{
	context = new AudioContext(); // Create audio container with webkit prefix.
    oscillator = context.createOscillator(); // Create sound source.
    oscillator.type = typeWave; // Set the type wave.
    oscillator.frequency.value = frequencyValue; // Set the frequency value.
    oscillator.detune.value = detuneValue; // Set the detune value.  
    oscillator.start(startAfterValue); // Play oscillator at startAfterValue second.
    oscillator.connect(context.destination); // Connect gain to output.
}

// This function stop the sound generated by oscillator.
function stop (oscillator)
{
	oscillator.stop(); // Stop oscillator instantly.
	oscillator.disconnect(); // Disconnect oscillator.
}

// This function read the user's value and next it calls play(typeWave, frequencyValue, detuneValue, startAfterValue) that create the oscillator.
function playOscillator()
{
	// When you press the play button: control-panel's div is hidden and summary's div is shown.
    document.getElementById("control-panel").style.display = "none";
    document.getElementById("summary").style.display = "block";
	
	// Type wave [Sine, Square, Sawtooth, Triangle].
    var typeWave = document.getElementById("type").options[document.getElementById("type").selectedIndex].value; // Read the user's value.
    
    // Frequency.
    var frequencyValue = document.getElementById("frequency").value; // Read the user's value.
    
    // Detune.
    var detuneValue = parseInt(document.getElementById("detune").value); // Read the user's value.
    
    // Start after.
    var startAfterValue = document.getElementById("startAfter").value; // Read the user's value.
    
    if (startAfterValue == "")
    // If the textbox is empty.
    	startAfterValue = 0; // Set default value.
     else // If the textbox isn't empty.
    	startAfterValue = parseInt(document.getElementById("startAfter").value);
    	
    play (typeWave, frequencyValue, detuneValue, startAfterValue);
}

function stopOscillator()
{
	stop(oscillator);
	
	// When you press the stop button: summary's div is hidden and control-panel's div is shown.
    document.getElementById("summary").style.display = "none";
    document.getElementById("control-panel").style.display = "block";
}

// jQuery function that call playOscillator(); when the HTML element with ID="play"
$('#play').click(function(){	
	playOscillator();
});

$('#stop').click(function(){
	stopOscillator();
});

// Map keyboard events for the play/stop function.	
$(document).on("keydown", function(e) {
	console.log(e);
	switch (e.keyCode) {
		case 32: // SPACE.
		{
			if (isplaying==false) // If oscilloscope isn't playing.
			{
				playOscillator();
				writeSummary();
				isplaying = true;
			} else	// If oscilloscope is playing.
			{
				stopOscillator();
				isplaying = false;
			}
		} break;
	}
})

// Map keyboard events for the type.
$(document).on("keydown", function(e) {
	console.log(e);
	switch (e.keyCode) {
		case 83: case 115: // S (Sine).
		{
			document.getElementById("type").options.selectedIndex = "sine"; // Funziona ma non mi fa vedere che l'ha selezionato. (Risolvere!).
		} break;
		
		case 81: case 113: // Q (Square).
		{
			document.getElementById("type").options.selectedIndex = "square";
		} break;
		
		case 87: case 119: // W (Sawtooth).
		{
			document.getElementById("type").options.selectedIndex = "sawtooth";
		} break;
		
		case 84: case 116: // T (Triangle).
		{
			document.getElementById("type").options.selectedIndex = "triangle";
		} break;
	}
})

// Map keyboard events for the frequency.
$(document).on("keydown", function(e) {
	console.log(e);
	switch (e.keyCode) {
		case 49: // 1 (Set the frequency to 200).
		{
			document.getElementById("frequency").value = 200;
		} break;
		
		case 50: // 2 (Set the frequency to 500).
		{
			document.getElementById("frequency").value = 500;
		} break;
		
		case 51: // 3 (Set the frequency to 800).
		{
			document.getElementById("frequency").value = 800;
		} break;
	}
})

// Map keyboard events for the detune.
$(document).on("keydown", function(e) {
	console.log(e);
	switch (e.keyCode) {
		case 52: // 4 (Set the detune to -30).
		{
			document.getElementById("detune").value = -30;
		} break;
		
		case 53: // 5 (Set the detune to 0).
		{
			document.getElementById("detune").value = 0;
		} break;
		
		case 54: // 6 (Set the detune to 50).
		{
			document.getElementById("detune").value = 50;
		} break;
	}
})
